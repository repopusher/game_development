
-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- max speed right/left
local MAX_OCEAN_SPEED = 100
-- max fall speed
local MAX_FALL_SPEED = 100

-- gravity pulling the player down in pixel units
local GRAVITY = -100

-- pre-hashing ids improves performance
local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local UPDATE_FISH_AND_MONEY_RESPONSE = hash("update_fish_capacity")
local HEALTH_RESPONSE = hash("subtract_enemy_counter")
local CAMERA_REFERENCE = "set_view_projection"

local WALL = hash("wall")
local LEFT = hash("left")
local RIGHT = hash("right")
local UP = hash("up")
local DOWN = hash("down")
local SPACE = hash("space")

local HP = 3

function init(self)
	-- '.' is relative game object (akin to 'this' keyword)
	msg.post(".", "acquire_input_focus")
	msg.post("camera", "acquire_camera_focus")
	-- Have to tell the camera to use fixed projection instead of default so you can zoom in. Should be in level script.
	msg.post("@render:", "use_fixed_projection", { zoom = 3.8, near = -30, far = 30 })	

	-- spawn position
	self.spawn_position = go.get_position()
	-- player velocity
	self.velocity = vmath.vector3(0, 0, 0)
	-- which direction the player is facing
	self.direction = 1
	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()
	-- the currently playing animation
	self.anim = nil
	self.ground_contact = true
	self.previous_ground_contact = true	

	self.money = 0
	self.current_hook_capacity = 0
end

-- clamp a number between a min and max value
local function clamp(v, min, max)
	if v < min then return min
	elseif v > max then return max
	else return v end
end

-- apply an opposing force to decrease a velocity
local function decelerate(v, f, dt)
	local opposing = math.abs(v * f)
	if v > 0 then
		return math.floor(math.max(0, v - opposing * dt))
	elseif v < 0 then
		return math.ceil(math.min(0, v + opposing * dt))
	else
		return 0
	end
end

function update(self, dt)
	-- apply gravity
	self.velocity.y = self.velocity.y + GRAVITY * dt
	self.velocity.y = clamp(self.velocity.y, -MAX_FALL_SPEED, MAX_FALL_SPEED)
	
	-- move player
	local pos = go.get_position()
	
	pos = pos + self.velocity * dt
	go.set_position(pos)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
	
end

local function player_movement(self, direction, axis)
	if direction ~= 0 then
		self.direction = direction
	end

	if axis == "x" then
		self.velocity.x = MAX_OCEAN_SPEED * direction
	elseif axis == "y" then
		self.velocity.y = MAX_OCEAN_SPEED * direction
	end
end

function on_input(self, action_id, action)
	-- go = game object
	if action_id == LEFT then
		player_movement(self, -action.value, "x")
	elseif action_id == RIGHT then
		player_movement(self, action.value, "x")
	elseif action_id == UP then
		player_movement(self, action.value, "y")
	elseif action_id == DOWN then
		player_movement(self, -action.value, "y")
	elseif action_id == hash("space") then
		player_movement(self, action.value)
	end
end

function wall_collision_handler(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall
	-- stop horizontal movement
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground
	-- stop vertical movement
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	-- collided with the ceiling
	-- stop vertical movement
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

function death_handler()
	msg.post("/hud#main", "game_over")

end

function on_message(self, message_id, message, sender)
	if message_id == CONTACT_POINT_RESPONSE then
		if message.group == WALL then
			wall_collision_handler(self, message.normal, message.distance)
		end
		
	elseif message_id == HEALTH_RESPONSE then
		HP = HP - message.amount
		if HP == 0 then
			death_handler()
		end
			
	elseif message_id == hash(CAMERA_REFERENCE) then
		self.view = message.view                    -- [1]
		self.projection = message.projection

	elseif message_id == UPDATE_FISH_AND_MONEY_RESPONSE then
		self.money = self.money + message.money
		self.current_hook_capacity = self.current_hook_capacity + 1

		print(self.money)
		print(self.current_hook_capacity)
	end
end
	